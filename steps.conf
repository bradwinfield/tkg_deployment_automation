# Start with a clean environment before running terraform...
clean_up_tfstate_files.sh

# Check/create users in vCenter before everything else...
check_users.py
# This terraform directory contains code to create roles and privileges.
user_terraform

# Add the user/role in the global permission table...
check_global_permissions.py

# Check/create the AVI resource pool...
check_avi_resource_pool.py

# Create the 3 AVI controllers...
avi_controller_terraform
# Abort if the AVI Controller does not get installed. Will always return error with newer AVI Terraform.

# Add step to configure the AVI controllers...
# This step is generating an error because it can not yet set the passphrase. Do it during manual config step.
set_avi_admin_password.py
Abort if AVI is not initialized.
#avi_configure_backup.py - not working yet

avi_cloud_credentials.py

# Please check AVI Default-Cloud to see if the vSphere objects are synchronizing.
# print_check_avi.sh
# pause_steps.sh

avi_configure_mgmt_network.py
avi_ipam_data_profile.py
avi_cloud_finish.py
avi_configure_data_network.py
# This next step will only configure the workload network if on a different subnet than the data network.
# It's ok to leave it as an active step. It will check to see if it should do something.
avi_configure_workload_network.py
avi_configure_vrf.py

# Once you have completed the AVI configuration...
# Convert the license to ...
avi_license_change.py ENTERPRISE # ESSENTIALS is no longer supported.

avi_ha.py
Abort if we can not configure AVI HA

# When you configure AVI for HA, it will take a while
# before it becomes responsive. So poll it until it is ready.
wait_for_avi_ha.py
Abort if AVI never comes back.

# The following manual steps are no longer needed.
# print_certificate_manual_steps.sh
# pause_steps.sh Pause to perform manual steps

# AVI needs web UI certs. You can either ask AVI to create a self-signed cert,
#  or you can provide a public cert you already created. Set the config.yaml flag avi_create_self_signed_cert accordingly.
# The following two steps work together according to "avi_create_self_signed_cert" setting
avi_create_self_signed_cert.py # Will run if "avi_create_self_signed_cert" is true.
avi_certificates.py # Will run if "avi_create_self_signed_cert" is false.
avi_portal_configuration.py # This sets whichever UI cert is created, to be used in AVI.

# Check / Create a storage policy in vSphere before enabling workload management.
check_storage_policy.py

# Enable Workload Management
# dependant upon env_for_library_id.py
env_for_library_id.py
wm_terraform
Abort on Error

# Try to login to the supervisor cluster
# This next step will try for about 30 minutes to give the supervisor cluster time to fully come up.
k8s_supervisor_login_admin.py
Abort now if we can not login to the supervisor cluster

# Create the vSphere namespace (but first get some vCenter object IDs)...
create_vsphere_namespace.py

# Add the Supervisor Cluster TLS Endpoint Certificate. Depends on: env_for_cluster_rp.py
wm_certificate.py

# Step to create workload cluster (needs set_kubeconfig.py and get_kube_api_vip.py)
k8s_supervisor_login_admin.py
tkcclustercreate.py

# Steps to complete workload cluster (needs k8s_cluster_login.py)
k8s_cluster_login.py
Abort now if we can not login to the workload cluster
# Increase the size of coredns to 256Mi
set_coredns_memory_limit.sh
check_sc.py
check_kapp.py
tanzu_package.py
cert-manager.py
check_contour.py
# check_cluster_rb.py # <-- Would have to provide the "Group name" in the .../templates/workload_cluster_rolebinding.yaml file before running this.
check_fluentbit.py
# check_prisma.sh # Sample script for Prisma vulnerability scanning. Customer specific.
check_tls_secret.sh

# Create and publish storage policy on workload with desired Reclaimpolicy and bind mode
create-local-sc.py

# Change the workload cluster VMs so the account vmware-system-user password does not expire
set_pass_expiry.py

# Smoke test
test_ingress.py

# Attach the cluster to TMC
# No longer used: tmc_attach_cluster.py

print_final_messages.py

# End - NOTE: This script will be invoked implicitly by run_pipeline.py
# Whenever a user enters CTRL-C or and Abort line is run or at the end of the pipeline.
# cleanup_temp_files.sh
